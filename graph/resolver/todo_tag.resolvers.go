package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"

	"github.com/ericgrandt/gqlgen-example/graph/generated"
	"github.com/ericgrandt/gqlgen-example/graph/model"
)

// CreateTodoTag is the resolver for the createTodoTag field.
func (r *mutationResolver) CreateTodoTag(ctx context.Context, input model.NewTodoTag) (model.TodoTag, error) {
	// TODO: Validate tag id belongs to user

	todoTag := model.TodoTag{
		TodoID: input.TodoID,
		TagID:  input.TagID,
	}

	stmt, err := r.db.Prepare("INSERT INTO todo_tag(todo_id, tag_id) VALUES (?, ?)")
	if err != nil {
		panic(err)
	}
	_, err = stmt.Exec(todoTag.TodoID, todoTag.TagID)
	if err != nil {
		panic(err)
	}

	return todoTag, nil
}

// Todo is the resolver for the todo field.
func (r *todoTagResolver) Todo(ctx context.Context, obj *model.TodoTag) (model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todo - todo"))
}

// Tag is the resolver for the tag field.
func (r *todoTagResolver) Tag(ctx context.Context, obj *model.TodoTag) (model.Tag, error) {
	panic(fmt.Errorf("not implemented: Tag - tag"))
}

// TodoTag returns generated.TodoTagResolver implementation.
func (r *Resolver) TodoTag() generated.TodoTagResolver { return &todoTagResolver{r} }

type todoTagResolver struct{ *Resolver }
